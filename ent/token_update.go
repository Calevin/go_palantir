// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Calevin/go_palantir/ent/predicate"
	"github.com/Calevin/go_palantir/ent/token"
)

// TokenUpdate is the builder for updating Token entities.
type TokenUpdate struct {
	config
	hooks    []Hook
	mutation *TokenMutation
}

// Where appends a list predicates to the TokenUpdate builder.
func (tu *TokenUpdate) Where(ps ...predicate.Token) *TokenUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetFile sets the "file" field.
func (tu *TokenUpdate) SetFile(s string) *TokenUpdate {
	tu.mutation.SetFile(s)
	return tu
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableFile(s *string) *TokenUpdate {
	if s != nil {
		tu.SetFile(*s)
	}
	return tu
}

// SetLine sets the "line" field.
func (tu *TokenUpdate) SetLine(i int) *TokenUpdate {
	tu.mutation.ResetLine()
	tu.mutation.SetLine(i)
	return tu
}

// SetNillableLine sets the "line" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableLine(i *int) *TokenUpdate {
	if i != nil {
		tu.SetLine(*i)
	}
	return tu
}

// AddLine adds i to the "line" field.
func (tu *TokenUpdate) AddLine(i int) *TokenUpdate {
	tu.mutation.AddLine(i)
	return tu
}

// SetOrder sets the "order" field.
func (tu *TokenUpdate) SetOrder(i int) *TokenUpdate {
	tu.mutation.ResetOrder()
	tu.mutation.SetOrder(i)
	return tu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableOrder(i *int) *TokenUpdate {
	if i != nil {
		tu.SetOrder(*i)
	}
	return tu
}

// AddOrder adds i to the "order" field.
func (tu *TokenUpdate) AddOrder(i int) *TokenUpdate {
	tu.mutation.AddOrder(i)
	return tu
}

// SetToken sets the "token" field.
func (tu *TokenUpdate) SetToken(s string) *TokenUpdate {
	tu.mutation.SetToken(s)
	return tu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableToken(s *string) *TokenUpdate {
	if s != nil {
		tu.SetToken(*s)
	}
	return tu
}

// Mutation returns the TokenMutation object of the builder.
func (tu *TokenUpdate) Mutation() *TokenMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TokenUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TokenUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TokenUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(token.Table, token.Columns, sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.File(); ok {
		_spec.SetField(token.FieldFile, field.TypeString, value)
	}
	if value, ok := tu.mutation.Line(); ok {
		_spec.SetField(token.FieldLine, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedLine(); ok {
		_spec.AddField(token.FieldLine, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Order(); ok {
		_spec.SetField(token.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedOrder(); ok {
		_spec.AddField(token.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Token(); ok {
		_spec.SetField(token.FieldToken, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TokenUpdateOne is the builder for updating a single Token entity.
type TokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TokenMutation
}

// SetFile sets the "file" field.
func (tuo *TokenUpdateOne) SetFile(s string) *TokenUpdateOne {
	tuo.mutation.SetFile(s)
	return tuo
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableFile(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetFile(*s)
	}
	return tuo
}

// SetLine sets the "line" field.
func (tuo *TokenUpdateOne) SetLine(i int) *TokenUpdateOne {
	tuo.mutation.ResetLine()
	tuo.mutation.SetLine(i)
	return tuo
}

// SetNillableLine sets the "line" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableLine(i *int) *TokenUpdateOne {
	if i != nil {
		tuo.SetLine(*i)
	}
	return tuo
}

// AddLine adds i to the "line" field.
func (tuo *TokenUpdateOne) AddLine(i int) *TokenUpdateOne {
	tuo.mutation.AddLine(i)
	return tuo
}

// SetOrder sets the "order" field.
func (tuo *TokenUpdateOne) SetOrder(i int) *TokenUpdateOne {
	tuo.mutation.ResetOrder()
	tuo.mutation.SetOrder(i)
	return tuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableOrder(i *int) *TokenUpdateOne {
	if i != nil {
		tuo.SetOrder(*i)
	}
	return tuo
}

// AddOrder adds i to the "order" field.
func (tuo *TokenUpdateOne) AddOrder(i int) *TokenUpdateOne {
	tuo.mutation.AddOrder(i)
	return tuo
}

// SetToken sets the "token" field.
func (tuo *TokenUpdateOne) SetToken(s string) *TokenUpdateOne {
	tuo.mutation.SetToken(s)
	return tuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableToken(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetToken(*s)
	}
	return tuo
}

// Mutation returns the TokenMutation object of the builder.
func (tuo *TokenUpdateOne) Mutation() *TokenMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TokenUpdate builder.
func (tuo *TokenUpdateOne) Where(ps ...predicate.Token) *TokenUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TokenUpdateOne) Select(field string, fields ...string) *TokenUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Token entity.
func (tuo *TokenUpdateOne) Save(ctx context.Context) (*Token, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TokenUpdateOne) SaveX(ctx context.Context) *Token {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TokenUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TokenUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TokenUpdateOne) sqlSave(ctx context.Context) (_node *Token, err error) {
	_spec := sqlgraph.NewUpdateSpec(token.Table, token.Columns, sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Token.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, token.FieldID)
		for _, f := range fields {
			if !token.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != token.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.File(); ok {
		_spec.SetField(token.FieldFile, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Line(); ok {
		_spec.SetField(token.FieldLine, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedLine(); ok {
		_spec.AddField(token.FieldLine, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Order(); ok {
		_spec.SetField(token.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedOrder(); ok {
		_spec.AddField(token.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Token(); ok {
		_spec.SetField(token.FieldToken, field.TypeString, value)
	}
	_node = &Token{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
